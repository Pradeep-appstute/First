/*     */ package com.estimote.sdk.service;
/*     */ 
/*     */ import android.app.AlarmManager;
/*     */ import android.app.PendingIntent;
/*     */ import android.app.Service;
/*     */ import android.bluetooth.BluetoothAdapter;
/*     */ import android.bluetooth.BluetoothAdapter.LeScanCallback;
/*     */ import android.bluetooth.BluetoothDevice;
/*     */ import android.bluetooth.BluetoothManager;
/*     */ import android.content.BroadcastReceiver;
/*     */ import android.content.Context;
/*     */ import android.content.Intent;
/*     */ import android.content.IntentFilter;
/*     */ import android.os.Handler;
/*     */ import android.os.HandlerThread;
/*     */ import android.os.IBinder;
/*     */ import android.os.Looper;
/*     */ import android.os.Message;
/*     */ import android.os.Messenger;
/*     */ import android.os.RemoteException;
/*     */ import android.os.SystemClock;
/*     */ import com.estimote.sdk.Beacon;
/*     */ import com.estimote.sdk.Region;
/*     */ import com.estimote.sdk.Region.State;
/*     */ import com.estimote.sdk.Utils;
/*     */ import com.estimote.sdk.internal.Preconditions;
/*     */ import com.estimote.sdk.utils.EstimoteBeacons;
/*     */ import com.estimote.sdk.utils.L;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map.Entry;
/*     */ import java.util.concurrent.ConcurrentHashMap;
/*     */ import java.util.concurrent.TimeUnit;
/*     */ 
/*     */ public class BeaconService extends Service
/*     */ {
/*     */   public static final int MSG_START_RANGING = 1;
/*     */   public static final int MSG_STOP_RANGING = 2;
/*     */   public static final int MSG_RANGING_RESPONSE = 3;
/*     */   public static final int MSG_START_MONITORING = 4;
/*     */   public static final int MSG_STOP_MONITORING = 5;
/*     */   public static final int MSG_MONITORING_RESPONSE = 6;
/*     */   public static final int MSG_REGISTER_ERROR_LISTENER = 7;
/*     */   public static final int MSG_ERROR_RESPONSE = 8;
/*     */   public static final int MSG_SET_FOREGROUND_SCAN_PERIOD = 9;
/*     */   public static final int MSG_SET_BACKGROUND_SCAN_PERIOD = 10;
/*     */   public static final int ERROR_COULD_NOT_START_LOW_ENERGY_SCANNING = -1;
/* 111 */   static final long EXPIRATION_MILLIS = TimeUnit.SECONDS.toMillis(10L);
/*     */   private static final String SCAN_START_ACTION_NAME = "startScan";
/*     */   private static final String AFTER_SCAN_ACTION_NAME = "afterScan";
/* 115 */   private static final Intent SCAN_START_INTENT = new Intent("startScan");
/* 116 */   private static final Intent AFTER_SCAN_INTENT = new Intent("afterScan");
/*     */   private final Messenger messenger;
/*     */   private final BluetoothAdapter.LeScanCallback leScanCallback;
/*     */   private final ConcurrentHashMap<Beacon, Long> beaconsFoundInScanCycle;
/*     */   private final List<RangingRegion> rangedRegions;
/*     */   private final List<MonitoringRegion> monitoredRegions;
/*     */   private BluetoothAdapter adapter;
/*     */   private AlarmManager alarmManager;
/*     */   private HandlerThread handlerThread;
/*     */   private Handler handler;
/*     */   private Runnable afterScanCycleTask;
/*     */   private boolean scanning;
/*     */   private Messenger errorReplyTo;
/*     */   private BroadcastReceiver bluetoothBroadcastReceiver;
/*     */   private BroadcastReceiver scanStartBroadcastReceiver;
/*     */   private PendingIntent scanStartBroadcastPendingIntent;
/*     */   private BroadcastReceiver afterScanBroadcastReceiver;
/*     */   private PendingIntent afterScanBroadcastPendingIntent;
/*     */   private ScanPeriodData foregroundScanPeriod;
/*     */   private ScanPeriodData backgroundScanPeriod;
/*     */ 
/*     */   public BeaconService()
/*     */   {
/* 119 */     this.messenger = new Messenger(new IncomingHandler());
/*     */ 
/* 122 */     this.leScanCallback = new InternalLeScanCallback();
/*     */ 
/* 125 */     this.beaconsFoundInScanCycle = new ConcurrentHashMap();
/*     */ 
/* 128 */     this.rangedRegions = new ArrayList();
/*     */ 
/* 131 */     this.monitoredRegions = new ArrayList();
/*     */ 
/* 155 */     this.foregroundScanPeriod = new ScanPeriodData(TimeUnit.SECONDS.toMillis(1L), TimeUnit.SECONDS.toMillis(0L));
/*     */ 
/* 158 */     this.backgroundScanPeriod = new ScanPeriodData(TimeUnit.SECONDS.toMillis(5L), TimeUnit.SECONDS.toMillis(30L));
/*     */   }
/*     */ 
/*     */   public void onCreate()
/*     */   {
/* 163 */     super.onCreate();
/* 164 */     L.i("Creating service");
/*     */ 
/* 166 */     this.alarmManager = ((AlarmManager)getSystemService("alarm"));
/* 167 */     BluetoothManager bluetoothManager = (BluetoothManager)getSystemService("bluetooth");
/* 168 */     this.adapter = bluetoothManager.getAdapter();
/* 169 */     this.afterScanCycleTask = new AfterScanCycleTask();
/*     */ 
/* 171 */     this.handlerThread = new HandlerThread("BeaconServiceThread", 10);
/* 172 */     this.handlerThread.start();
/* 173 */     this.handler = new Handler(this.handlerThread.getLooper());
/*     */ 
/* 175 */     this.bluetoothBroadcastReceiver = createBluetoothBroadcastReceiver();
/* 176 */     this.scanStartBroadcastReceiver = createScanStartBroadcastReceiver();
/* 177 */     this.afterScanBroadcastReceiver = createAfterScanBroadcastReceiver();
/* 178 */     registerReceiver(this.bluetoothBroadcastReceiver, new IntentFilter("android.bluetooth.adapter.action.STATE_CHANGED"));
/* 179 */     registerReceiver(this.scanStartBroadcastReceiver, new IntentFilter("startScan"));
/* 180 */     registerReceiver(this.afterScanBroadcastReceiver, new IntentFilter("afterScan"));
/* 181 */     this.afterScanBroadcastPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, AFTER_SCAN_INTENT, 0);
/* 182 */     this.scanStartBroadcastPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, SCAN_START_INTENT, 0);
/*     */   }
/*     */ 
/*     */   public void onDestroy()
/*     */   {
/* 187 */     L.i("Service destroyed");
/* 188 */     unregisterReceiver(this.bluetoothBroadcastReceiver);
/* 189 */     unregisterReceiver(this.scanStartBroadcastReceiver);
/* 190 */     unregisterReceiver(this.afterScanBroadcastReceiver);
/*     */ 
/* 192 */     if (this.adapter != null) {
/* 193 */       stopScanning();
/*     */     }
/*     */ 
/* 196 */     removeAfterScanCycleCallback();
/* 197 */     this.handlerThread.quit();
/*     */ 
/* 199 */     super.onDestroy();
/*     */   }
/*     */ 
/*     */   public IBinder onBind(Intent intent)
/*     */   {
/* 204 */     return this.messenger.getBinder();
/*     */   }
/*     */ 
/*     */   private void startRanging(RangingRegion rangingRegion) {
/* 208 */     checkNotOnUiThread();
/* 209 */     L.v("Start ranging: " + rangingRegion.region);
/* 210 */     Preconditions.checkNotNull(this.adapter, "Bluetooth adapter cannot be null");
/* 211 */     this.rangedRegions.add(rangingRegion);
/* 212 */     startScanning();
/*     */   }
/*     */ 
/*     */   private void stopRanging(String regionId) {
/* 216 */     L.v("Stopping ranging: " + regionId);
/* 217 */     checkNotOnUiThread();
/* 218 */     Iterator iterator = this.rangedRegions.iterator();
/* 219 */     while (iterator.hasNext()) {
/* 220 */       RangingRegion rangingRegion = (RangingRegion)iterator.next();
/* 221 */       if (regionId.equals(rangingRegion.region.getIdentifier())) {
/* 222 */         iterator.remove();
/*     */       }
/*     */     }
/* 225 */     if ((this.rangedRegions.isEmpty()) && (this.monitoredRegions.isEmpty())) {
/* 226 */       removeAfterScanCycleCallback();
/* 227 */       stopScanning();
/* 228 */       this.beaconsFoundInScanCycle.clear();
/*     */     }
/*     */   }
/*     */ 
/*     */   public void startMonitoring(MonitoringRegion monitoringRegion) {
/* 233 */     checkNotOnUiThread();
/* 234 */     L.v("Starting monitoring: " + monitoringRegion.region);
/* 235 */     Preconditions.checkNotNull(this.adapter, "Bluetooth adapter cannot be null");
/* 236 */     this.monitoredRegions.add(monitoringRegion);
/* 237 */     startScanning();
/*     */   }
/*     */ 
/*     */   public void stopMonitoring(String regionId) {
/* 241 */     L.v("Stopping monitoring: " + regionId);
/* 242 */     checkNotOnUiThread();
/* 243 */     Iterator iterator = this.monitoredRegions.iterator();
/* 244 */     while (iterator.hasNext()) {
/* 245 */       MonitoringRegion monitoringRegion = (MonitoringRegion)iterator.next();
/* 246 */       if (regionId.equals(monitoringRegion.region.getIdentifier())) {
/* 247 */         iterator.remove();
/*     */       }
/*     */     }
/* 250 */     if ((this.monitoredRegions.isEmpty()) && (this.rangedRegions.isEmpty())) {
/* 251 */       removeAfterScanCycleCallback();
/* 252 */       stopScanning();
/* 253 */       this.beaconsFoundInScanCycle.clear();
/*     */     }
/*     */   }
/*     */ 
/*     */   private void startScanning() {
/* 258 */     if (this.scanning) {
/* 259 */       L.d("Scanning already in progress, not starting one more");
/* 260 */       return;
/*     */     }
/* 262 */     if ((this.monitoredRegions.isEmpty()) && (this.rangedRegions.isEmpty())) {
/* 263 */       L.d("Not starting scanning, no monitored on ranged regions");
/* 264 */       return;
/*     */     }
/* 266 */     if (!this.adapter.isEnabled()) {
/* 267 */       L.d("Bluetooth is disabled, not starting scanning");
/* 268 */       return;
/*     */     }
/* 270 */     if (!this.adapter.startLeScan(this.leScanCallback)) {
/* 271 */       L.wtf("Bluetooth adapter did not start le scan");
/* 272 */       sendError(Integer.valueOf(-1));
/* 273 */       return;
/*     */     }
/* 275 */     this.scanning = true;
/* 276 */     removeAfterScanCycleCallback();
/* 277 */     setAlarm(this.afterScanBroadcastPendingIntent, scanPeriodTimeMillis());
/*     */   }
/*     */ 
/*     */   private void stopScanning()
/*     */   {
/*     */     try {
/* 283 */       this.scanning = false;
/* 284 */       this.adapter.stopLeScan(this.leScanCallback);
/*     */     } catch (Exception e) {
/* 286 */       L.wtf("BluetoothAdapter throws unexpected exception", e);
/*     */     }
/*     */   }
/*     */ 
/*     */   private void sendError(Integer errorId) {
/* 291 */     if (this.errorReplyTo != null) {
/* 292 */       Message errorMsg = Message.obtain(null, 8);
/* 293 */       errorMsg.obj = errorId;
/*     */       try {
/* 295 */         this.errorReplyTo.send(errorMsg);
/*     */       } catch (RemoteException e) {
/* 297 */         L.e("Error while reporting message, funny right?", e);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   private long scanPeriodTimeMillis() {
/* 303 */     if (!this.rangedRegions.isEmpty()) {
/* 304 */       return this.foregroundScanPeriod.scanPeriodMillis;
/*     */     }
/* 306 */     return this.backgroundScanPeriod.scanPeriodMillis;
/*     */   }
/*     */ 
/*     */   private long scanWaitTimeMillis()
/*     */   {
/* 311 */     if (!this.rangedRegions.isEmpty()) {
/* 312 */       return this.foregroundScanPeriod.waitTimeMillis;
/*     */     }
/* 314 */     return this.backgroundScanPeriod.waitTimeMillis;
/*     */   }
/*     */ 
/*     */   private void setAlarm(PendingIntent pendingIntent, long delayMillis)
/*     */   {
/* 319 */     this.alarmManager.set(2, SystemClock.elapsedRealtime() + delayMillis, pendingIntent);
/*     */   }
/*     */ 
/*     */   private void checkNotOnUiThread()
/*     */   {
/* 502 */     Preconditions.checkArgument(Looper.getMainLooper().getThread() != Thread.currentThread(), "This cannot be run on UI thread, starting BLE scan can be expensive");
/*     */ 
/* 504 */     Preconditions.checkNotNull(Boolean.valueOf(this.handlerThread.getLooper() == Looper.myLooper()), "It must be executed on service's handlerThread");
/*     */   }
/*     */ 
/*     */   private BroadcastReceiver createBluetoothBroadcastReceiver()
/*     */   {
/* 513 */     return new BroadcastReceiver()
/*     */     {
/*     */       public void onReceive(Context context, Intent intent) {
/* 516 */         if ("android.bluetooth.adapter.action.STATE_CHANGED".equals(intent.getAction())) {
/* 517 */           int state = intent.getIntExtra("android.bluetooth.adapter.extra.STATE", -1);
/* 518 */           if (state == 10)
/* 519 */             BeaconService.this.handler.post(new Runnable()
/*     */             {
/*     */               public void run() {
/* 522 */                 L.i("Bluetooth is OFF: stopping scanning");
/* 523 */                 BeaconService.this.removeAfterScanCycleCallback();
/* 524 */                 BeaconService.this.stopScanning();
/* 525 */                 BeaconService.this.beaconsFoundInScanCycle.clear();
/*     */               }
/*     */             });
/* 528 */           else if (state == 12)
/* 529 */             BeaconService.this.handler.post(new Runnable()
/*     */             {
/*     */               public void run() {
/* 532 */                 if ((!BeaconService.this.monitoredRegions.isEmpty()) || (!BeaconService.this.rangedRegions.isEmpty())) {
/* 533 */                   L.i(String.format("Bluetooth is ON: resuming scanning (monitoring: %d ranging:%d)", new Object[] { Integer.valueOf(BeaconService.this.monitoredRegions.size()), Integer.valueOf(BeaconService.this.rangedRegions.size()) }));
/*     */ 
/* 535 */                   BeaconService.this.startScanning();
/*     */                 }
/*     */               }
/*     */             });
/*     */         }
/*     */       }
/*     */     };
/*     */   }
/*     */ 
/*     */   private void removeAfterScanCycleCallback()
/*     */   {
/* 546 */     this.handler.removeCallbacks(this.afterScanCycleTask);
/* 547 */     this.alarmManager.cancel(this.afterScanBroadcastPendingIntent);
/* 548 */     this.alarmManager.cancel(this.scanStartBroadcastPendingIntent);
/*     */   }
/*     */ 
/*     */   private BroadcastReceiver createAfterScanBroadcastReceiver() {
/* 552 */     return new BroadcastReceiver()
/*     */     {
/*     */       public void onReceive(Context context, Intent intent) {
/* 555 */         BeaconService.this.handler.post(BeaconService.this.afterScanCycleTask);
/*     */       }
/*     */     };
/*     */   }
/*     */ 
/*     */   private BroadcastReceiver createScanStartBroadcastReceiver() {
/* 561 */     return new BroadcastReceiver()
/*     */     {
/*     */       public void onReceive(Context context, Intent intent) {
/* 564 */         BeaconService.this.handler.post(new Runnable()
/*     */         {
/*     */           public void run() {
/* 567 */             BeaconService.this.startScanning();
/*     */           }
/*     */         });
/*     */       }
/*     */     };
/*     */   }
/*     */ 
/*     */   private class InternalLeScanCallback
/*     */     implements BluetoothAdapter.LeScanCallback
/*     */   {
/*     */     private InternalLeScanCallback()
/*     */     {
/*     */     }
/*     */ 
/*     */     public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord)
/*     */     {
/* 490 */       BeaconService.this.checkNotOnUiThread();
/* 491 */       Beacon beacon = Utils.beaconFromLeScan(device, rssi, scanRecord);
/* 492 */       if ((beacon == null) || (!EstimoteBeacons.isEstimoteBeacon(beacon))) {
/* 493 */         L.v("Device " + device + " is not an Estimote beacon");
/* 494 */         return;
/*     */       }
/* 496 */       BeaconService.this.beaconsFoundInScanCycle.put(beacon, Long.valueOf(System.currentTimeMillis()));
/*     */     }
/*     */   }
/*     */ 
/*     */   private class IncomingHandler extends Handler
/*     */   {
/*     */     private IncomingHandler()
/*     */     {
/*     */     }
/*     */ 
/*     */     public void handleMessage(Message msg)
/*     */     {
/* 440 */       final int what = msg.what;
/* 441 */       final Object obj = msg.obj;
/* 442 */       final Messenger replyTo = msg.replyTo;
/* 443 */       BeaconService.this.handler.post(new Runnable()
/*     */       {
/*     */         public void run() {
/* 446 */           switch (what) {
/*     */           case 1:
/* 448 */             RangingRegion rangingRegion = new RangingRegion((Region)obj, replyTo);
/* 449 */             BeaconService.this.startRanging(rangingRegion);
/* 450 */             break;
/*     */           case 2:
/* 452 */             String rangingRegionId = (String)obj;
/* 453 */             BeaconService.this.stopRanging(rangingRegionId);
/* 454 */             break;
/*     */           case 4:
/* 456 */             MonitoringRegion monitoringRegion = new MonitoringRegion((Region)obj, replyTo);
/* 457 */             BeaconService.this.startMonitoring(monitoringRegion);
/* 458 */             break;
/*     */           case 5:
/* 460 */             String monitoredRegionId = (String)obj;
/* 461 */             BeaconService.this.stopMonitoring(monitoredRegionId);
/* 462 */             break;
/*     */           case 7:
/* 464 */             BeaconService.this.errorReplyTo = replyTo;
/* 465 */             break;
/*     */           case 9:
/* 467 */             L.d("Setting foreground scan period: " + BeaconService.this.foregroundScanPeriod);
/* 468 */             BeaconService.this.foregroundScanPeriod = ((ScanPeriodData)obj);
/* 469 */             break;
/*     */           case 10:
/* 471 */             L.d("Setting background scan period: " + BeaconService.this.backgroundScanPeriod);
/* 472 */             BeaconService.this.backgroundScanPeriod = ((ScanPeriodData)obj);
/* 473 */             break;
/*     */           case 3:
/*     */           case 6:
/*     */           case 8:
/*     */           default:
/* 475 */             L.d("Unknown message: what=" + what + " obj=" + obj);
/*     */           }
/*     */         }
/*     */       });
/*     */     }
/*     */   }
/*     */ 
/*     */   private class AfterScanCycleTask
/*     */     implements Runnable
/*     */   {
/*     */     private AfterScanCycleTask()
/*     */     {
/*     */     }
/*     */ 
/*     */     private void processRanging()
/*     */     {
/* 334 */       for (RangingRegion rangedRegion : BeaconService.this.rangedRegions)
/* 335 */         rangedRegion.processFoundBeacons(BeaconService.this.beaconsFoundInScanCycle);
/*     */     }
/*     */ 
/*     */     private List<MonitoringRegion> findEnteredRegions(long currentTimeMillis)
/*     */     {
/* 340 */       List didEnterRegions = new ArrayList();
/* 341 */       for (Map.Entry entry : BeaconService.this.beaconsFoundInScanCycle.entrySet()) {
/* 342 */         for (MonitoringRegion monitoringRegion : matchingMonitoredRegions((Beacon)entry.getKey())) {
/* 343 */           monitoringRegion.processFoundBeacons(BeaconService.this.beaconsFoundInScanCycle);
/* 344 */           if (monitoringRegion.markAsSeen(currentTimeMillis)) {
/* 345 */             didEnterRegions.add(monitoringRegion);
/*     */           }
/*     */         }
/*     */       }
/* 349 */       return didEnterRegions;
/*     */     }
/*     */ 
/*     */     private List<MonitoringRegion> matchingMonitoredRegions(Beacon beacon) {
/* 353 */       List results = new ArrayList();
/* 354 */       for (MonitoringRegion monitoredRegion : BeaconService.this.monitoredRegions) {
/* 355 */         if (Utils.isBeaconInRegion(beacon, monitoredRegion.region)) {
/* 356 */           results.add(monitoredRegion);
/*     */         }
/*     */       }
/* 359 */       return results;
/*     */     }
/*     */ 
/*     */     private void removeNotSeenBeacons(long currentTimeMillis) {
/* 363 */       for (RangingRegion rangedRegion : BeaconService.this.rangedRegions) {
/* 364 */         rangedRegion.removeNotSeenBeacons(currentTimeMillis);
/*     */       }
/* 366 */       for (MonitoringRegion monitoredRegion : BeaconService.this.monitoredRegions)
/* 367 */         monitoredRegion.removeNotSeenBeacons(currentTimeMillis);
/*     */     }
/*     */ 
/*     */     private List<MonitoringRegion> findExitedRegions(long currentTimeMillis)
/*     */     {
/* 372 */       List didExitMonitors = new ArrayList();
/* 373 */       for (MonitoringRegion monitoredRegion : BeaconService.this.monitoredRegions) {
/* 374 */         if (monitoredRegion.didJustExit(currentTimeMillis)) {
/* 375 */           didExitMonitors.add(monitoredRegion);
/*     */         }
/*     */       }
/* 378 */       return didExitMonitors;
/*     */     }
/*     */ 
/*     */     private void invokeCallbacks(List<MonitoringRegion> enteredMonitors, List<MonitoringRegion> exitedMonitors) {
/* 382 */       for (RangingRegion rangingRegion : BeaconService.this.rangedRegions) {
/*     */         try {
/* 384 */           Message rangingResponseMsg = Message.obtain(null, 3);
/* 385 */           rangingResponseMsg.obj = new RangingResult(rangingRegion.region, rangingRegion.getSortedBeacons());
/* 386 */           rangingRegion.replyTo.send(rangingResponseMsg);
/*     */         } catch (RemoteException e) {
/* 388 */           L.e("Error while delivering responses", e);
/*     */         }
/*     */       }
/* 391 */       for (MonitoringRegion didEnterMonitor : enteredMonitors) {
/* 392 */         Message monitoringResponseMsg = Message.obtain(null, 6);
/* 393 */         monitoringResponseMsg.obj = new MonitoringResult(didEnterMonitor.region, Region.State.INSIDE, didEnterMonitor.getSortedBeacons());
/*     */         try
/*     */         {
/* 396 */           didEnterMonitor.replyTo.send(monitoringResponseMsg);
/*     */         } catch (RemoteException e) {
/* 398 */           L.e("Error while delivering responses", e);
/*     */         }
/*     */       }
/* 401 */       for (MonitoringRegion didEnterMonitor : exitedMonitors) {
/* 402 */         Message monitoringResponseMsg = Message.obtain(null, 6);
/* 403 */         monitoringResponseMsg.obj = new MonitoringResult(didEnterMonitor.region, Region.State.OUTSIDE, Collections.<Beacon>emptyList());
/*     */         try
/*     */         {
/* 406 */           didEnterMonitor.replyTo.send(monitoringResponseMsg);
/*     */         } catch (RemoteException e) {
/* 408 */           L.e("Error while delivering responses", e);
/*     */         }
/*     */       }
/*     */     }
/*     */ 
/*     */     public void run()
/*     */     {
/* 415 */       BeaconService.this.checkNotOnUiThread();
/* 416 */       long now = System.currentTimeMillis();
/* 417 */       BeaconService.this.stopScanning();
/* 418 */       processRanging();
/* 419 */       List enteredRegions = findEnteredRegions(now);
/* 420 */       List exitedRegions = findExitedRegions(now);
/* 421 */       removeNotSeenBeacons(now);
/* 422 */       BeaconService.this.beaconsFoundInScanCycle.clear();
/* 423 */       invokeCallbacks(enteredRegions, exitedRegions);
/* 424 */       if (BeaconService.this.scanWaitTimeMillis() == 0L)
/* 425 */         BeaconService.this.startScanning();
/*     */       else
/* 427 */         BeaconService.this.setAlarm(BeaconService.this.scanStartBroadcastPendingIntent, BeaconService.access$800(BeaconService.this));
/*     */     }
/*     */   }
/*     */ }

/* Location:           /Users/AppstuteMac5/Downloads/Android-SDK-master/EstimoteSDK/estimote-sdk-preview.jar
 * Qualified Name:     com.estimote.sdk.service.BeaconService
 * JD-Core Version:    0.6.2
 */