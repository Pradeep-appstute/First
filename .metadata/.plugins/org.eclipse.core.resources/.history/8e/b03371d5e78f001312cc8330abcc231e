package com.masergy.iscticket.slidermenu;

import java.util.List;

import com.masergy.iscticket.R;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

class ListAdapter extends BaseAdapter {
    private LayoutInflater mInflater;
    private String[] listitems;
    private int[] listicons;
    
    public ListAdapter(Context context) {
        // Cache the LayoutInflate to avoid asking for a new one each time.
        mInflater = LayoutInflater.from(context);
        listitems = context.getResources().getStringArray(R.array.list_items);
        listicons = context.getResources().getIntArray(R.array.list_icons);
    }

    /**
     * The number of items in the list is determined by the number of speeches
     * in our array.
     *
     * @see android.widget.ListAdapter#getCount()
     */
    public int getCount() {

        return listitems.length;
    }

    /**
     * Since the data comes from an array, just returning the index is
     * sufficent to get at the data. If we were using a more complex data
     * structure, we would return whatever object represents one row in the
     * list.
     *
     * @see android.widget.ListAdapter#getItem(int)
     */
    public Object getItem(int position) {
        return position;
    }

    /**
     * Use the array index as a unique id.
     *
     * @see android.widget.ListAdapter#getItemId(int)
     */
    public long getItemId(int position) {
        return position;
    }

    /**
     * Make a view to hold each row.
     *
     * @see android.widget.ListAdapter#getView(int, android.view.View,
     *      android.view.ViewGroup)
     */

    public View getView(final int position, View convertView, ViewGroup parent) {
        // A ViewHolder keeps references to children views to avoid unneccessary calls
        // to findViewById() on each row.

        // When convertView is not null, we can reuse it directly, there is no need
        // to reinflate it. We only inflate a new View when the convertView supplied
        // by ListView is null.
        if (convertView == null) {

            convertView = mInflater.inflate(R.layout.row, null);

            // Creates a ViewHolder and store references to the two children views
            // we want to bind data to.

            TextView textView = (TextView) convertView.findViewById(R.id.row_title);
            textView.setText(listitems[position]);
            
            ImageView imageView = (ImageView) convertView.findViewById(R.id.row_icon);
            imageView.setBackgroundResource(listicons[position]);


        } else {
            // Get the ViewHolder back to get fast access to the TextView
            // and the ImageView.
            
        	convertView.findViewById(R.id.row_title).setText(listitems[position]);
            convertView.findViewById(R.id.row_icon).setBackgroundResource(listicons[position]);
        }


        return convertView;
    }



}