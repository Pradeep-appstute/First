package com.masergy.iscticket.ContentView;

import java.util.ArrayList;
import java.util.zip.Inflater;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Filter;
import android.widget.ListAdapter;
import android.widget.TextView;

import com.masergy.iscticket.R;
import com.masergy.iscticket.ContentView.Fragment_Tickets.Comment;

public class TicketsDetailsListAdapter extends BaseAdapter implements
		ListAdapter {
	// Public
	Context mContext;
	ArrayList<Comment> comment_List;

	TicketsDetailsListAdapter(Context context, ArrayList<Comment> list) {
		mContext = context;
		this.comment_List = list ;
	}

	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return comment_List.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return comment_List.get(position);
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		if (convertView == null) {
			LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

			convertView = inflater.inflate(R.layout.ticketdetails_view_list_item, parent, false);
		
			((TextView) convertView)
					.setText(filtered_modifyServiceList.get(position).bundleId + " "
							+ filtered_modifyServiceList.get(position).location);
			((TextView) convertView).setTextSize(16);
			// ((TextView)convertView).setRelative(5, 5, 5, 5);
		}
		((TextView) convertView)
				.setText(filtered_modifyServiceList.get(position).bundleId + " "
						+ filtered_modifyServiceList.get(position).location);
		((TextView) convertView).setTextSize(16);

		return ((TextView) convertView);
	}

	public Filter getFilter() {
		return mFilter;
	}

	public class ItemFilter extends Filter {
		@Override
		protected FilterResults performFiltering(CharSequence constraint) {
			String filterString = constraint.toString().toLowerCase();
			FilterResults results = new FilterResults();
			final ArrayList<ModifyService> list = original_modifyServiceList;

			int count = list.size();
			final ArrayList<ModifyService> new_list = new ArrayList<ModifyService>(count);

			ModifyService filterableString;
			for (int i = 0; i < count; i++) {
				filterableString = list.get(i);
				if (filterableString.bundleId.toString().toLowerCase().contains(filterString) || filterableString.location.toString().toLowerCase().contains(filterString)) {
					new_list.add(filterableString);
				}
			}
			results.values = new_list;
			results.count = new_list.size();

			return results;
		}

		@SuppressWarnings("unchecked")
		@Override
		protected void publishResults(CharSequence constraint, FilterResults results) {
			filtered_modifyServiceList = (ArrayList<ModifyService>) results.values;
			
			notifyDataSetChanged();
		}

	}//eof class ItemFilter
}
