package com.masergy.iscticket.utility;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Date;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EncodingUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;
import com.masergy.iscticket.Activity_SliderMenu;
import com.masergy.iscticket.ContentView.Ticket;

/*
 To edit data from sharedpreference

 SharedPreferences.Editor editor = getPreferences(MODE_PRIVATE).edit();
 editor.putString("text", mSaved.getText().toString());
 editor.putInt("selection-start", mSaved.getSelectionStart());
 editor.putInt("selection-end", mSaved.getSelectionEnd());
 editor.commit();

 To retrieve data from shared preference

 SharedPreferences prefs = getPreferences(MODE_PRIVATE); 
 String restoredText = prefs.getString("text", null);
 if (restoredText != null) 
 {
 //mSaved.setText(restoredText, TextView.BufferType.EDITABLE);
 int selectionStart = prefs.getInt("selection-start", -1);
 int selectionEnd = prefs.getInt("selection-end", -1);
 //if (selectionStart != -1 && selectionEnd != -1)
 //{
 //  mSaved.setSelection(selectionStart, selectionEnd);
 //}
 }

 */

public class Webservice_GetTicketsList {

	final int Today = 0, CurrentWeek = 1, LastWeek = 2, CurrentMonth = 3;
	// Set Of dates
	Date todaysDate;
	ArrayList<Date> currentWeekDatesList;
	ArrayList<Date> lastWeekDatesList;
	ArrayList<Date> currentMonthList;

	// Set of open, closed and maintenance tickets
	ArrayList<Ticket> open_ticketList;
	ArrayList<Ticket> closed_ticketList;
	ArrayList<Ticket> maint_ticketList;

	// Set of open tickets
	ArrayList<Ticket> open_todaysTicketList;
	ArrayList<Ticket> open_currentWeekTicketList;
	ArrayList<Ticket> open_lastWeekTicketList;
	ArrayList<Ticket> open_currentMonthTicketList;

	// Set of closed tickets
	ArrayList<Ticket> closed_todaysTicketList;
	ArrayList<Ticket> closed_currentWeekTicketList;
	ArrayList<Ticket> closed_lastWeekTicketList;
	ArrayList<Ticket> closed_currentMonthTicketList;

	// Set of maintenance tickets
	ArrayList<Ticket> maint_todaysTicketList;
	ArrayList<Ticket> maint_currentWeekTicketList;
	ArrayList<Ticket> maint_lastWeekTicketList;
	ArrayList<Ticket> maint_currentMonthTicketList;

	SharedPreferences.Editor sharedPrefEditor;

	String webServiceLink = "https://webservice-dev.masergy.com/webservices_mobile/rest/v1/ticket/list";
	// String webServiceLink
	// ="https://webservice.masergy.com/webservices_mobile/rest/v1/ticket/list";
	Context mContext;
	ProgressDialog mpProgress;

	public Webservice_GetTicketsList(Context context) {
		this.mContext = context;
		String fileName = "Login";
		sharedPrefEditor = ((Activity) context).getSharedPreferences(fileName,
				context.MODE_PRIVATE).edit();
	}

	public void postData() {
		if (isNetworkAvailable()) {
			post_data post = new post_data();
			post.execute();
		} else {
			Toast.makeText(mContext, "No network availble", 1000).show();
		}
	}

	// =========================class post_data ========================
	class post_data extends AsyncTask<Void, Void, String> {
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();

			((Activity) mContext).runOnUiThread(new Runnable() {

				@Override
				public void run() {
					// TODO Auto-generated method stub
					mpProgress = ProgressDialog.show(mContext,
							"Ticket web-service call",
							"Please wait for a moment...");
				}
			});

			// Init
			open_ticketList = new ArrayList<Ticket>();
			closed_ticketList = new ArrayList<Ticket>();
			maint_ticketList = new ArrayList<Ticket>();

			currentWeekDatesList = new ArrayList<Date>();
			lastWeekDatesList = new ArrayList<Date>();
			currentMonthList = new ArrayList<Date>();
			fillUpDatesArray();
			
			open_todaysTicketList = new ArrayList<Ticket>();
			open_currentWeekTicketList = new ArrayList<Ticket>();
			open_lastWeekTicketList = new ArrayList<Ticket>();
			open_currentMonthTicketList = new ArrayList<Ticket>();

			closed_todaysTicketList = new ArrayList<Ticket>();
			closed_currentWeekTicketList = new ArrayList<Ticket>();
			closed_lastWeekTicketList = new ArrayList<Ticket>();
			closed_currentMonthTicketList = new ArrayList<Ticket>();

			maint_todaysTicketList = new ArrayList<Ticket>();
			maint_currentWeekTicketList = new ArrayList<Ticket>();
			maint_lastWeekTicketList = new ArrayList<Ticket>();
			maint_currentMonthTicketList = new ArrayList<Ticket>();
		}

		@Override
		protected String doInBackground(Void... params) {
			// Variable declaration
			String result = null;

			// Create http client object to send request to server
			HttpClient httpclient = new DefaultHttpClient();
			// Create Request to server and get response
			HttpGet httpget = new HttpGet(webServiceLink);
			httpget.setHeader("Content-Type", "application/json");
			httpget.setHeader(
					"Authorization",
					mContext.getSharedPreferences(Send_to_Web.fileName,
							mContext.MODE_PRIVATE).getString("authToken", null));
			HttpResponse response;
			try {

				response = httpclient.execute(httpget);
				HttpEntity entity = response.getEntity();
				if (entity != null) {

					// Read JSON Response
					InputStream instream = entity.getContent();
					StringWriter writer = new StringWriter();
					IOUtils.copy(instream, writer);
					result = writer.toString();
					Log.d("tag", "theString=" + result);
					instream.close();

					// Convert string to JSONArray
					JSONArray jsonArray = new JSONArray(result);

					// Getting JSON Array node
					for (int i = 0; i < jsonArray.length(); i++) {

						JSONObject jsonObj = jsonArray.getJSONObject(i);
						Ticket ticket = new Ticket();
						/*
						 * Log.d("tag", "" + jsonObj.get("ticketId"));
						 * Log.d("tag", "" + jsonObj.get("subject"));
						 * Log.d("tag", "" + jsonObj.get("status"));
						 * Log.d("tag", "" + jsonObj.get("createDate"));
						 * Log.d("tag", "" + jsonObj.get("closeDate"));
						 */
						if (!(jsonObj.get("ticketId").equals(JSONObject.NULL)))
							ticket.ticketId = jsonObj.getInt("ticketId");
						else
							ticket.ticketId = -1;

						if (!(jsonObj.get("subject").equals(JSONObject.NULL)))
							ticket.subject = jsonObj.getString("subject");
						else
							ticket.subject = "";

						if (!(jsonObj.get("status").equals(JSONObject.NULL))) {
							ticket.status = jsonObj.getString("status");

							if (ticket.status.equalsIgnoreCase("Open")) {
								open_ticketList.add(ticket);
							} else if (ticket.status.equalsIgnoreCase("Closed")) {
								closed_ticketList.add(ticket);
							} else if (ticket.status.equalsIgnoreCase("Maint")
									|| ticket.status.equalsIgnoreCase("Maint.")
									|| ticket.status
											.equalsIgnoreCase("Maintenance")) {
								maint_ticketList.add(ticket);
							}
						} else
							ticket.status = "";

						if (!(jsonObj.get("createDate").equals(JSONObject.NULL)))
							ticket.createDate = jsonObj.getInt("createDate");
						else
							ticket.createDate = -1;

						if (!(jsonObj.get("closeDate").equals(JSONObject.NULL)))
							ticket.closeDate = jsonObj.getInt("closeDate");
						else
							ticket.closeDate = -1;
					}// for
					
					
				}// if

			} catch (JSONException e) {
				e.printStackTrace();
			} catch (ClientProtocolException e) {
				if (mpProgress.isShowing())
					mpProgress.dismiss();
				// TODO Auto-generated catch block
			} catch (IOException e) {
				if (mpProgress.isShowing())
					mpProgress.dismiss();
				// TODO Auto-generated catch block
			}
			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			if (mpProgress.isShowing())
				mpProgress.dismiss();
			super.onPostExecute(result);
			if (result != null) {

				// Toast.makeText(mContext, "Response-"+result, 1000).show();
				// System.out.println("Response="+result);

			} else {
				Toast.makeText(mContext, "No response from server", 1000)
						.show();
				System.out.println("No response from server");
			}
		}

	}

	// =================================================================

	// To check network connectivity
	private boolean isNetworkAvailable() {
		ConnectivityManager connectivityManager = (ConnectivityManager) mContext
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo activeNetworkInfo = connectivityManager
				.getActiveNetworkInfo();
		return activeNetworkInfo != null && activeNetworkInfo.isConnected();
	}
}