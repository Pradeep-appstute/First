/*     */ package com.estimote.sdk;
/*     */ 
/*     */ import android.bluetooth.BluetoothAdapter;
/*     */ import android.bluetooth.BluetoothManager;
/*     */ import android.content.ComponentName;
/*     */ import android.content.Context;
/*     */ import android.content.Intent;
/*     */ import android.content.ServiceConnection;
/*     */ import android.content.pm.PackageManager;
/*     */ import android.os.Handler;
/*     */ import android.os.IBinder;
/*     */ import android.os.Message;
/*     */ import android.os.Messenger;
/*     */ import android.os.RemoteException;
/*     */ import com.estimote.sdk.internal.Preconditions;
/*     */ import com.estimote.sdk.service.BeaconService;
/*     */ import com.estimote.sdk.service.MonitoringResult;
/*     */ import com.estimote.sdk.service.RangingResult;
/*     */ import com.estimote.sdk.service.ScanPeriodData;
/*     */ import com.estimote.sdk.utils.L;
/*     */ import java.util.HashSet;
/*     */ import java.util.List;
/*     */ import java.util.Set;
/*     */ import java.util.concurrent.CopyOnWriteArraySet;
/*     */ 
/*     */ public class BeaconManager
/*     */ {
/*     */   private static final String ANDROID_MANIFEST_CONDITIONS_MSG = "AndroidManifest.xml does not contain android.permission.BLUETOOTH or android.permission.BLUETOOTH_ADMIN permissions. BeaconService may be also not declared in AndroidManifest.xml.";
/*     */   private final Context context;
/*     */   private final InternalServiceConnection serviceConnection;
/*     */   private final Messenger incomingMessenger;
/*     */   private final Set<String> rangedRegionIds;
/*     */   private final Set<String> monitoredRegionIds;
/*     */   private Messenger serviceMessenger;
/*     */   private RangingListener rangingListener;
/*     */   private MonitoringListener monitoringListener;
/*     */   private ErrorListener errorListener;
/*     */   private ServiceReadyCallback callback;
/*     */   private ScanPeriodData foregroundScanPeriod;
/*     */   private ScanPeriodData backgroundScanPeriod;
/*     */ 
/*     */   public BeaconManager(Context context)
/*     */   {
/* 159 */     this.context = ((Context)Preconditions.checkNotNull(context));
/* 160 */     this.serviceConnection = new InternalServiceConnection();
/* 161 */     this.incomingMessenger = new Messenger(new IncomingHandler());
/* 162 */     this.rangedRegionIds = new HashSet();
/* 163 */     this.monitoredRegionIds = new HashSet();
/*     */   }
/*     */ 
/*     */   public boolean hasBluetooth()
/*     */   {
/* 168 */     return this.context.getPackageManager().hasSystemFeature("android.hardware.bluetooth_le");
/*     */   }
/*     */ 
/*     */   public boolean isBluetoothEnabled()
/*     */   {
/* 180 */     if (!checkPermissionsAndService()) {
/* 181 */       L.e("AndroidManifest.xml does not contain android.permission.BLUETOOTH or android.permission.BLUETOOTH_ADMIN permissions. BeaconService may be also not declared in AndroidManifest.xml.");
/* 182 */       return false;
/*     */     }
/* 184 */     BluetoothManager bluetoothManager = (BluetoothManager)this.context.getSystemService("bluetooth");
/* 185 */     BluetoothAdapter adapter = bluetoothManager.getAdapter();
/* 186 */     return (adapter != null) && (adapter.isEnabled());
/*     */   }
/*     */ 
/*     */   public boolean checkPermissionsAndService()
/*     */   {
/* 197 */     PackageManager pm = this.context.getPackageManager();
/* 198 */     int bluetoothPermission = pm.checkPermission("android.permission.BLUETOOTH", this.context.getPackageName());
/* 199 */     int bluetoothAdminPermission = pm.checkPermission("android.permission.BLUETOOTH_ADMIN", this.context.getPackageName());
/*     */ 
/* 201 */     Intent intent = new Intent(this.context, BeaconService.class);
/* 202 */     List resolveInfo = pm.queryIntentServices(intent, 65536);
/*     */ 
/* 204 */     return (bluetoothPermission == 0) && (bluetoothAdminPermission == 0) && (resolveInfo.size() > 0);
/*     */   }
/*     */ 
/*     */   public void connect(ServiceReadyCallback callback)
/*     */   {
/* 215 */     if (!checkPermissionsAndService()) {
/* 216 */       L.e("AndroidManifest.xml does not contain android.permission.BLUETOOTH or android.permission.BLUETOOTH_ADMIN permissions. BeaconService may be also not declared in AndroidManifest.xml.");
/*     */     }
/* 218 */     this.callback = ((ServiceReadyCallback)Preconditions.checkNotNull(callback, "callback cannot be null"));
/* 219 */     if (isConnectedToService()) {
/* 220 */       callback.onServiceReady();
/*     */     }
/* 222 */     boolean bound = this.context.bindService(new Intent(this.context, BeaconService.class), this.serviceConnection, 1);
/*     */ 
/* 226 */     if (!bound)
/* 227 */       L.w("Could not bind service: make sure thatcom.estimote.sdk.service.BeaconService is declared in AndroidManifest.xml");
/*     */   }
/*     */ 
/*     */   public void disconnect()
/*     */   {
/* 238 */     if (!isConnectedToService()) {
/* 239 */       L.i("Not disconnecting because was not connected to service");
/* 240 */       return;
/*     */     }
/* 242 */     CopyOnWriteArraySet tempRangedRegionIds = new CopyOnWriteArraySet(this.rangedRegionIds);
/* 243 */     for (String regionId : tempRangedRegionIds) {
/*     */       try {
/* 245 */         internalStopRanging(regionId);
/*     */       } catch (RemoteException e) {
/* 247 */         L.e("Swallowing error while disconnect/stopRanging", e);
/*     */       }
/*     */     }
/* 250 */     CopyOnWriteArraySet tempMonitoredRegionIds = new CopyOnWriteArraySet(this.monitoredRegionIds);
/* 251 */     for (String regionId : tempMonitoredRegionIds) {
/*     */       try {
/* 253 */         internalStopMonitoring(regionId);
/*     */       } catch (RemoteException e) {
/* 255 */         L.e("Swallowing error while disconnect/stopMonitoring", e);
/*     */       }
/*     */     }
/* 258 */     this.context.unbindService(this.serviceConnection);
/* 259 */     this.serviceMessenger = null;
/*     */   }
/*     */ 
/*     */   public void setRangingListener(RangingListener listener)
/*     */   {
/* 268 */     this.rangingListener = ((RangingListener)Preconditions.checkNotNull(listener, "listener cannot be null"));
/*     */   }
/*     */ 
/*     */   public void setMonitoringListener(MonitoringListener listener)
/*     */   {
/* 277 */     this.monitoringListener = ((MonitoringListener)Preconditions.checkNotNull(listener, "listener cannot be null"));
/*     */   }
/*     */ 
/*     */   public void setErrorListener(ErrorListener listener)
/*     */   {
/* 286 */     this.errorListener = listener;
/* 287 */     if ((isConnectedToService()) && (listener != null))
/* 288 */       registerErrorListenerInService();
/*     */   }
/*     */ 
/*     */   public void setForegroundScanPeriod(long scanPeriodMillis, long waitTimeMillis)
/*     */   {
/* 300 */     if (isConnectedToService())
/* 301 */       setScanPeriod(new ScanPeriodData(scanPeriodMillis, waitTimeMillis), 10);
/*     */     else
/* 303 */       this.foregroundScanPeriod = new ScanPeriodData(scanPeriodMillis, waitTimeMillis);
/*     */   }
/*     */ 
/*     */   public void setBackgroundScanPeriod(long scanPeriodMillis, long waitTimeMillis)
/*     */   {
/* 315 */     if (isConnectedToService())
/* 316 */       setScanPeriod(new ScanPeriodData(scanPeriodMillis, waitTimeMillis), 9);
/*     */     else
/* 318 */       this.backgroundScanPeriod = new ScanPeriodData(scanPeriodMillis, waitTimeMillis);
/*     */   }
/*     */ 
/*     */   private void setScanPeriod(ScanPeriodData scanPeriodData, int msgId)
/*     */   {
/* 323 */     Message scanPeriodMsg = Message.obtain(null, msgId);
/* 324 */     scanPeriodMsg.obj = scanPeriodData;
/*     */     try {
/* 326 */       this.serviceMessenger.send(scanPeriodMsg);
/*     */     } catch (RemoteException e) {
/* 328 */       L.e("Error while setting scan periods: " + msgId);
/*     */     }
/*     */   }
/*     */ 
/*     */   private void registerErrorListenerInService() {
/* 333 */     Message registerMsg = Message.obtain(null, 7);
/* 334 */     registerMsg.replyTo = this.incomingMessenger;
/*     */     try {
/* 336 */       this.serviceMessenger.send(registerMsg);
/*     */     } catch (RemoteException e) {
/* 338 */       L.e("Error while registering error listener");
/*     */     }
/*     */   }
/*     */ 
/*     */   public void startRanging(Region region)
/*     */     throws RemoteException
/*     */   {
/* 351 */     if (!isConnectedToService()) {
/* 352 */       L.i("Not starting ranging, not connected to service");
/* 353 */       return;
/*     */     }
/* 355 */     Preconditions.checkNotNull(region, "region cannot be null");
/*     */ 
/* 357 */     if (this.rangedRegionIds.contains(region.getIdentifier())) {
/* 358 */       L.i("Region already ranged but that's OK: " + region);
/*     */     }
/* 360 */     this.rangedRegionIds.add(region.getIdentifier());
/*     */ 
/* 362 */     Message startRangingMsg = Message.obtain(null, 1);
/* 363 */     startRangingMsg.obj = region;
/* 364 */     startRangingMsg.replyTo = this.incomingMessenger;
/*     */     try {
/* 366 */       this.serviceMessenger.send(startRangingMsg);
/*     */     } catch (RemoteException e) {
/* 368 */       L.e("Error while starting ranging", e);
/* 369 */       throw e;
/*     */     }
/*     */   }
/*     */ 
/*     */   public void stopRanging(Region region) throws RemoteException {
/* 374 */     if (!isConnectedToService()) {
/* 375 */       L.i("Not stopping ranging, not connected to service");
/* 376 */       return;
/*     */     }
/* 378 */     Preconditions.checkNotNull(region, "region cannot be null");
/* 379 */     internalStopRanging(region.getIdentifier());
/*     */   }
/*     */ 
/*     */   private void internalStopRanging(String regionId) throws RemoteException {
/* 383 */     this.rangedRegionIds.remove(regionId);
/* 384 */     Message stopRangingMsg = Message.obtain(null, 2);
/* 385 */     stopRangingMsg.obj = regionId;
/*     */     try {
/* 387 */       this.serviceMessenger.send(stopRangingMsg);
/*     */     } catch (RemoteException e) {
/* 389 */       L.e("Error while stopping ranging", e);
/* 390 */       throw e;
/*     */     }
/*     */   }
/*     */ 
/*     */   public void startMonitoring(Region region) throws RemoteException {
/* 395 */     if (!isConnectedToService()) {
/* 396 */       L.i("Not starting monitoring, not connected to service");
/* 397 */       return;
/*     */     }
/* 399 */     Preconditions.checkNotNull(region, "region cannot be null");
/*     */ 
/* 401 */     if (this.monitoredRegionIds.contains(region.getIdentifier())) {
/* 402 */       L.i("Region already monitored but that's OK: " + region);
/*     */     }
/* 404 */     this.monitoredRegionIds.add(region.getIdentifier());
/*     */ 
/* 406 */     Message startMonitoringMsg = Message.obtain(null, 4);
/* 407 */     startMonitoringMsg.obj = region;
/* 408 */     startMonitoringMsg.replyTo = this.incomingMessenger;
/*     */     try {
/* 410 */       this.serviceMessenger.send(startMonitoringMsg);
/*     */     } catch (RemoteException e) {
/* 412 */       L.e("Error while starting monitoring", e);
/* 413 */       throw e;
/*     */     }
/*     */   }
/*     */ 
/*     */   public void stopMonitoring(Region region) throws RemoteException {
/* 418 */     if (!isConnectedToService()) {
/* 419 */       L.i("Not stopping monitoring, not connected to service");
/* 420 */       return;
/*     */     }
/* 422 */     Preconditions.checkNotNull(region, "region cannot be null");
/* 423 */     internalStopMonitoring(region.getIdentifier());
/*     */   }
/*     */ 
/*     */   private void internalStopMonitoring(String regionId) throws RemoteException {
/* 427 */     this.monitoredRegionIds.remove(regionId);
/* 428 */     Message stopMonitoringMsg = Message.obtain(null, 5);
/* 429 */     stopMonitoringMsg.obj = regionId;
/*     */     try {
/* 431 */       this.serviceMessenger.send(stopMonitoringMsg);
/*     */     } catch (RemoteException e) {
/* 433 */       L.e("Error while stopping ranging");
/* 434 */       throw e;
/*     */     }
/*     */   }
/*     */ 
/*     */   private boolean isConnectedToService() {
/* 439 */     return this.serviceMessenger != null;
/*     */   }
/*     */ 
/*     */   private class IncomingHandler extends Handler
/*     */   {
/*     */     private IncomingHandler()
/*     */     {
/*     */     }
/*     */ 
/*     */     public void handleMessage(Message msg)
/*     */     {
/* 473 */       switch (msg.what) {
/*     */       case 3:
/* 475 */         if (BeaconManager.this.rangingListener != null) {
/* 476 */           RangingResult rangingResult = (RangingResult)msg.obj;
/* 477 */           BeaconManager.this.rangingListener.onBeaconsDiscovered(rangingResult.region, rangingResult.beacons);
/* 478 */         }break;
/*     */       case 6:
/* 481 */         if (BeaconManager.this.monitoringListener != null) {
/* 482 */           MonitoringResult monitoringResult = (MonitoringResult)msg.obj;
/* 483 */           if (monitoringResult.state == Region.State.INSIDE)
/* 484 */             BeaconManager.this.monitoringListener.onEnteredRegion(monitoringResult.region, monitoringResult.beacons);
/*     */           else
/* 486 */             BeaconManager.this.monitoringListener.onExitedRegion(monitoringResult.region);
/*     */         }
/* 488 */         break;
/*     */       case 8:
/* 491 */         if (BeaconManager.this.errorListener != null) {
/* 492 */           Integer errorId = (Integer)msg.obj;
/* 493 */           BeaconManager.this.errorListener.onError(errorId);
/* 494 */         }break;
/*     */       default:
/* 497 */         L.d("Unknown message: " + msg);
/*     */       }
/*     */     }
/*     */   }
/*     */ 
/*     */   private class InternalServiceConnection
/*     */     implements ServiceConnection
/*     */   {
/*     */     private InternalServiceConnection()
/*     */     {
/*     */     }
/*     */ 
/*     */     public void onServiceConnected(ComponentName name, IBinder service)
/*     */     {
/* 445 */       BeaconManager.this.serviceMessenger = new Messenger(service);
/* 446 */       if (BeaconManager.this.errorListener != null) {
/* 447 */         BeaconManager.this.registerErrorListenerInService();
/*     */       }
/* 449 */       if (BeaconManager.this.foregroundScanPeriod != null) {
/* 450 */         BeaconManager.this.setScanPeriod(BeaconManager.this.foregroundScanPeriod, 9);
/* 451 */         BeaconManager.this.foregroundScanPeriod = null;
/*     */       }
/* 453 */       if (BeaconManager.this.backgroundScanPeriod != null) {
/* 454 */         BeaconManager.this.setScanPeriod(BeaconManager.this.backgroundScanPeriod, 10);
/* 455 */         BeaconManager.this.backgroundScanPeriod = null;
/*     */       }
/* 457 */       if (BeaconManager.this.callback != null) {
/* 458 */         BeaconManager.this.callback.onServiceReady();
/* 459 */         BeaconManager.this.callback = null;
/*     */       }
/*     */     }
/*     */ 
/*     */     public void onServiceDisconnected(ComponentName name)
/*     */     {
/* 465 */       L.e("Service disconnected, crashed? " + name);
/* 466 */       BeaconManager.this.serviceMessenger = null;
/*     */     }
/*     */   }
/*     */ 
/*     */   public static abstract interface ErrorListener
/*     */   {
/*     */     public abstract void onError(Integer paramInteger);
/*     */   }
/*     */ 
/*     */   public static abstract interface MonitoringListener
/*     */   {
/*     */     public abstract void onEnteredRegion(Region paramRegion, List<Beacon> paramList);
/*     */ 
/*     */     public abstract void onExitedRegion(Region paramRegion);
/*     */   }
/*     */ 
/*     */   public static abstract interface RangingListener
/*     */   {
/*     */     public abstract void onBeaconsDiscovered(Region paramRegion, List<Beacon> paramList);
/*     */   }
/*     */ 
/*     */   public static abstract interface ServiceReadyCallback
/*     */   {
/*     */     public abstract void onServiceReady();
/*     */   }
/*     */ }

/* Location:           /Users/AppstuteMac5/Downloads/Android-SDK-master/EstimoteSDK/estimote-sdk-preview.jar
 * Qualified Name:     com.estimote.sdk.BeaconManager
 * JD-Core Version:    0.6.2
 */